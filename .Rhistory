from boto3.dynamodb.conditions import Key, Attr
dplyr::as_tibble(NULL)
t <- dplyr::as_tibble(NULL)
nrow(t)
purrr::map_dfr(c(1, 2, 3), ~ NULL)
as.numeric(Sys.time())*1000
as.numeric(Sys.time())
library(dutils)
install.packages('shinyWidgets')
c(-1, NULL)
ct <- c(1, 2, 3, NA, NA, NA, 4, 5, 6)
var_values <- c(1, 2, 3, NA, NA, NA, 4, 5, 6)
which(is.na(var_values) & !is.na(lag(var_values)))
library(dplyr)
which(is.na(var_values) & !is.na(lag(var_values)))
install.packages('shiny')
install.packages('shinydashboard')
install.packages('devtools')
install.packages(c('shiny.semantic', 'shinyWidgets'))
install.packages(c('xts', 'dygraphs'))
install.packages('reticulate')
24%/%3
24%%3
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), 1:3)
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), 4)
split(1:10, 1:2)
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), rep(seq(1, y/n), each = n))
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), rep(seq(1, 12/4), each = 4))
seq(1, 12, 4)
seq(1, 12, 3)
install.packages('roxygen2')
install.packages('devtools')
install.packages('reticulate')
install.packages('reticulate')
force_tz(as_datetime(dmy(paste0("0101", df_year))), tzone = tzone),
force_tz(as_datetime(dmy(paste0("0101", df_year))), tzone = tzone)
install.packages("reticulate")
stringr::str_length("Heat demand")
stringr::str_length("Gas neighbourhood")
stringr::str_length("State-of-Charge")
stringr::str_length("Production")
stringr::str_length("Commuters")
nchar("Commuters")
nchar("Production")
75/9
9*stringr::str_length(paste("Households electricity", max(192.3)))+14
paste("Households electricity", max(192.3))
9*stringr::str_length(paste("Households electricity", max(191.08)))+14
NA/3
y = c(NA, NA, NA)
y = c(NA, NA, NA, NA)
n = 4
tibble(
idx = rep(seq(1, length(y)/n), each = n),
y = y
) %>%
group_by(.data$idx) %>%
summarise(y = mean(y)) %>%
pull(y) %>%
as.numeric()
library(dplyr)
tibble(
idx = rep(seq(1, length(y)/n), each = n),
y = y
) %>%
group_by(.data$idx) %>%
summarise(y = mean(y)) %>%
pull(y) %>%
as.numeric()
y[seq(1, length(y), n)]
tibble(
idx = rep(seq(1, length(y)/n), each = n),
y = y
) %>%
group_by(.data$idx) %>%
summarise(y = sum(y)) %>%
pull(y) %>%
as.numeric()
