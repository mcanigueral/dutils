from boto3.dynamodb.conditions import Key, Attr
dplyr::as_tibble(NULL)
t <- dplyr::as_tibble(NULL)
nrow(t)
purrr::map_dfr(c(1, 2, 3), ~ NULL)
as.numeric(Sys.time())*1000
as.numeric(Sys.time())
library(dutils)
install.packages('shinyWidgets')
c(-1, NULL)
ct <- c(1, 2, 3, NA, NA, NA, 4, 5, 6)
var_values <- c(1, 2, 3, NA, NA, NA, 4, 5, 6)
which(is.na(var_values) & !is.na(lag(var_values)))
library(dplyr)
which(is.na(var_values) & !is.na(lag(var_values)))
install.packages('shiny')
install.packages('shinydashboard')
install.packages('devtools')
install.packages(c('shiny.semantic', 'shinyWidgets'))
install.packages(c('xts', 'dygraphs'))
install.packages('reticulate')
24%/%3
24%%3
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), 1:3)
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), 4)
split(1:10, 1:2)
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), rep(seq(1, y/n), each = n))
split(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3), rep(seq(1, 12/4), each = 4))
seq(1, 12, 4)
seq(1, 12, 3)
install.packages('roxygen2')
install.packages('devtools')
install.packages('reticulate')
install.packages('reticulate')
force_tz(as_datetime(dmy(paste0("0101", df_year))), tzone = tzone),
force_tz(as_datetime(dmy(paste0("0101", df_year))), tzone = tzone)
install.packages("reticulate")
stringr::str_length("Heat demand")
stringr::str_length("Gas neighbourhood")
stringr::str_length("State-of-Charge")
stringr::str_length("Production")
stringr::str_length("Commuters")
nchar("Commuters")
nchar("Production")
75/9
9*stringr::str_length(paste("Households electricity", max(192.3)))+14
paste("Households electricity", max(192.3))
9*stringr::str_length(paste("Households electricity", max(191.08)))+14
NA/3
y = c(NA, NA, NA)
y = c(NA, NA, NA, NA)
n = 4
tibble(
idx = rep(seq(1, length(y)/n), each = n),
y = y
) %>%
group_by(.data$idx) %>%
summarise(y = mean(y)) %>%
pull(y) %>%
as.numeric()
library(dplyr)
tibble(
idx = rep(seq(1, length(y)/n), each = n),
y = y
) %>%
group_by(.data$idx) %>%
summarise(y = mean(y)) %>%
pull(y) %>%
as.numeric()
y[seq(1, length(y), n)]
tibble(
idx = rep(seq(1, length(y)/n), each = n),
y = y
) %>%
group_by(.data$idx) %>%
summarise(y = sum(y)) %>%
pull(y) %>%
as.numeric()
install.packages(c("shinydashboard", "shinyWidgets"))
install.packages("tsibble")
library(flextools)
energy_profiles
energy_profiles %>% mutate(wday = wday(datetime))
library(dplyr)
library(lubridate)
energy_profiles %>% mutate(wday = wday(datetime, week_start = 1))
df <- energy_profiles
df_year <- unique(year(df$datetime))
df_tz <- tz(df$datetime)
df_year
df_tz
df_resolution <- as.numeric(df$datetime[2] - df$datetime[1], units = "mins")
df_resolution
# Which day of the week is the first one in the year_out?
datetime_seq_year <- get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
devtools::load_all(".")
# Which day of the week is the first one in the year_out?
datetime_seq_year <- get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
year_out = 2050
# Which day of the week is the first one in the year_out?
datetime_seq_year <- get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
datetime_seq_year
year_out_first_wday <- wday(datetime_seq_year[1], week_start = 1)
year_out_first_wday
year_out = 2035
# Which day of the week is the first one in the year_out?
datetime_seq_year <- get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
year_out_first_wday <- wday(datetime_seq_year[1], week_start = 1)
year_out_first_wday
year_out = 2030
# Which day of the week is the first one in the year_out?
datetime_seq_year <- get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
year_out_first_wday <- wday(datetime_seq_year[1], week_start = 1)
year_out_first_wday
year_in_start_wday_idx <-
which(wday(df$datetime, week_start = 1) == year_out_first_wday)[1]
year_in_start_wday_idx
192/96
year_in_start_wday_idx
# Reorder data to match days of the week
if (year_in_start_wday_idx > 1) {
df_wday <- bind_rows(
df[seq(year_in_start_wday_idx, nrow(df)), ],
df[seq(1, year_in_start_wday_idx-1), ]
)
} else {
df_wday <- df
}
df_wday
df_wday <- df_wday %>%
mutate(
datetime = get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
) %>%
select("datetime", everything())
df_wday
energy_profiles$datetime[1] %>% wday(week_start = 1)
energy_profiles$datetime %>% wday(week_start = 1)
energy_profiles$datetime[nrow(energy_profiles)] %>% wday(week_start = 1)
energy_profiles$datetime[1] %>% wday(week_start = 1)
nrow(energy_profiles/96)
nrow(energy_profiles)/96
nrow(energy_profiles)/96/7
364/7
library(dutils)
library(flextools)
df <- energy_profiles
year_out = 2050
df_year <- unique(year(df$datetime))
df_tz <- tz(df$datetime)
df_resolution <- as.numeric(df$datetime[2] - df$datetime[1], units = "mins")
# Checks
if (length(df_year) > 1) {
message("Error: more than one year in date time sequence of data")
return( NULL )
}
if (year_out == df_year) {
return( df )
}
# Which day of the week is the first one in the year_out?
datetime_seq_year <- get_datetime_seq(
year = year_out, tzone = df_tz,
resolution_mins = df_resolution, fullyear = T
)
year_out_first_wday <- wday(datetime_seq_year[1], week_start = 1)
year_out_first_wday
datetime_seq_year
datetime_seq_year[1]
year_out_first_wday
wday(df$datetime, week_start = 1)
year_in_start_wday_idx <-
which(wday(df$datetime, week_start = 1) == year_out_first_wday)[1]
year_in_start_wday_idx
# Reorder data to match days of the week
if (year_in_start_wday_idx > 1) {
df_wday <- bind_rows(
df[seq(year_in_start_wday_idx, nrow(df)), ],
df[seq(1, year_in_start_wday_idx-1), ]
)
} else {
df_wday <- df
}
df_wday
df_wday %>% mutate(wday = wday(datetime, week_start = 1))
year_out_first_wday
library(dutils)
library(dutils)
